import sys
import pandas as pd
import argparse
import matplotlib.pyplot as plt
import matplotlib as mpl

'''
Get file names and sheet names
'''
def get_filename():
    inputfile = ''
    parser = argparse.ArgumentParser(prog="V2xhub Analysis for ERV BSM")
    parser.add_argument('--input', type=str, required=True)
    parser.add_argument('--sheet_names', type=str, required=True,
                        help='FER-13-1-1,FER-14,FER-15,FER-TBD-1')
    args = parser.parse_args()
    print(f'Received excel file: {args.input}')
    inputfile = args.input
    sheet_names = args.sheet_names
    return inputfile, sheet_names


'''
Main entrypoint to read the excel file and generate plots for metrics: FER-13, FER-14, adn FER-15.
This plot data is generated by scripts: v2xhub_log_analysis_erv.py
'''
def main():
    inputfile, sheet_names_input_str = get_filename()
    sheet_names_input = sheet_names_input_str.split(',')
    FER_4_field_dicts = {}
    FER_5_field_dicts = {}
    FER_8_field_dicts = {}
    FER_9_field_dicts = {}
    FER_10_field_dicts = {}
    df_sheet_bsm_not_from_erv = {}
    df_sheet_bsm_from_erv = {}
    FIVE_SEC_WINDOW = 5
    # Read excel file and see all sheet names
    xl = pd.ExcelFile(inputfile)
    all_sheet_names = xl.sheet_names
    if bool(set(all_sheet_names).isdisjoint(sheet_names_input)):
        print(
            f'ERROR: Sheet names {sheet_names_input_str} not found! Provide correct sheet names with comma sperated.')
        exit()

    ''' ***Reading sheets and process metrics*** '''
    print(f'Reading sheet {sheet_names_input}. \nGenerating plots...')
    for sheet_name in sheet_names_input:
        sheet_name = sheet_name.strip()
        try:
            if sheet_name == 'FER-4-5':
                '''
                Metric FER-4 and FER-5: Reading sheet FER-4-5. Generate field dictionaries for V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren.
                Generate field dictionaries for any 5-second window, V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren at a rate of 8-12 messages/sec..
                '''
                df_sheet_bsm_not_from_erv = pd.read_excel(
                    inputfile, sheet_name=sheet_name)
                total_num_bsm_not_from_erv = len(df_sheet_bsm_not_from_erv.index)
                print(
                    f'Number of None-ERV BSM received by v2xhub: {total_num_bsm_not_from_erv}')
                FER_4_field_dicts['Incoming BSM is not from Emergency Response Vehicle (ERV)'] = total_num_bsm_not_from_erv
                bsm_no_partII_num = 0
                for item in df_sheet_bsm_not_from_erv['Incoming BSM is not from Emergency Response Vehicle (ERV)']:
                    if 'partII'.lower() not in item:
                        bsm_no_partII_num += 1
                FER_4_field_dicts['Received BSM without partII'] = bsm_no_partII_num

                bsm_not_from_erv_timestamp_list = df_sheet_bsm_not_from_erv['Time (UTC)']
                bsm_not_from_erv_start_ts = pd.to_datetime(bsm_not_from_erv_timestamp_list[0])
                FER_5_field_dicts ['Average num of BSM per second without partII'] = []
                FER_5_field_dicts ['Time (UTC)'] = []
                five_second_window_bsm_count = 0           
                select_start_time = bsm_not_from_erv_start_ts 
                for record_time_str in bsm_not_from_erv_timestamp_list:
                    record_time = pd.to_datetime(record_time_str)
                    record_time_total_seconds_of_day = record_time.hour * 3600 + record_time.minute * 60 + record_time.second
                    select_time_total_seconds_of_day = select_start_time.hour * 3600 + select_start_time.minute * 60 + select_start_time.second
                    if record_time_total_seconds_of_day >= select_time_total_seconds_of_day and  (record_time_total_seconds_of_day < select_time_total_seconds_of_day + FIVE_SEC_WINDOW ):
                        five_second_window_bsm_count += 1
                    else:
                        FER_5_field_dicts ['Time (UTC)'].append( select_start_time.strftime('%H:%M:%S') )
                        FER_5_field_dicts ['Average num of BSM per second without partII'].append(five_second_window_bsm_count / FIVE_SEC_WINDOW)
                        select_start_time = select_start_time + pd.to_timedelta(FIVE_SEC_WINDOW, unit='s') 
                        five_second_window_bsm_count = 1  
            
            elif sheet_name == 'FER-8-9-10':
                '''
                Metrics FER-8 and FER-9: Reading sheet FER-8-9-10. Generate dictionary for V2xHub receives the ERV's BSM with Part II information once the ERV falls within the RSU's communication range after it activates its lights and siren.
                Generate  dictionary for Once the ERV activates its lights and siren and falls within the communication range of the RSU, V2xHub will begin to receive the ERVs BSM at a rate of 8-12 messages/sec.
                '''
                df_sheet_bsm_from_erv = pd.read_excel(
                    inputfile, sheet_name=sheet_name)
                total_num_bsm_from_erv = len(df_sheet_bsm_from_erv.index)
                print(
                    f'Number of ERV BSM received by v2xhub: {total_num_bsm_from_erv}')
                FER_8_field_dicts['Forward ERV BSM to cloud'] = total_num_bsm_from_erv
                bsm_partII_num = 0
                for item in df_sheet_bsm_from_erv['Forward ERV BSM to cloud']:
                    # route inforamtion is from regional extension which is only populated when ERV has partII siren on
                    if 'route' in item:
                        bsm_partII_num += 1
                FER_8_field_dicts['Received BSM with route'] = bsm_partII_num
                bsm_from_erv_timestamp_list = df_sheet_bsm_from_erv['Time (UTC)']
                bsm_from_erv_start_ts = pd.to_datetime(bsm_from_erv_timestamp_list[0])
                FER_9_field_dicts ['Average num of BSM per second with route'] = []
                FER_9_field_dicts ['Time (UTC)'] = []
                five_second_window_bsm_count = 0           
                select_start_time = bsm_from_erv_start_ts 
                for record_time_str in bsm_from_erv_timestamp_list:
                    record_time = pd.to_datetime(record_time_str)
                    record_time_total_seconds_of_day = record_time.hour * 3600 + record_time.minute * 60 + record_time.second
                    select_time_total_seconds_of_day = select_start_time.hour * 3600 + select_start_time.minute * 60 + select_start_time.second
                    if record_time_total_seconds_of_day >= select_time_total_seconds_of_day and  (record_time_total_seconds_of_day < select_time_total_seconds_of_day + FIVE_SEC_WINDOW ):
                        five_second_window_bsm_count += 1
                    else:
                        FER_9_field_dicts ['Time (UTC)'].append( select_start_time.strftime('%H:%M:%S') )
                        FER_9_field_dicts ['Average num of BSM per second with route'].append(five_second_window_bsm_count / FIVE_SEC_WINDOW)
                        select_start_time = select_start_time + pd.to_timedelta(FIVE_SEC_WINDOW, unit='s') 
                        five_second_window_bsm_count = 1   
            elif sheet_name == 'FER-TODO':
                '''
                Metrics FER-10: Once V2xHub receives the ERV's BSM, it will identify whether emergency exists and forward the ERV's BSM over to CARMA Cloud.
                '''
            elif sheet_name == 'FER-11-1':
                '''
                Metrics FER-11: Reading sheet FER-11-1. Generate dictionary for once V2xHub receives the ERV's BSM, it will identify whether emergency exists and forward the ERV's BSM over to CARMA Cloud within 0.1 second.
                '''
                df_sheet_forward_bsm_delay = pd.read_excel(
                    inputfile, sheet_name=sheet_name)
            elif sheet_name == 'FER-TBD-1':
                '''
                Metrics FER-TBD-1: Received ERV BSM from cloud.                
                '''
                df_sheet_bsm_from_cloud = pd.read_excel(inputfile, sheet_name=sheet_name)
                print(f'Total number of BSM received from cloud: {len(df_sheet_bsm_from_cloud.index)}')
            elif sheet_name == 'FER-TBD-2':
                '''
                Metrics FER-TBD-2: Received ERV BSM from cloud and broadcast ERV BSM delay(ms).                
                '''
                df_sheet_bsm_from_cloud_broadcast_delay = pd.read_excel(inputfile, sheet_name=sheet_name)
        except ValueError as a:
            print(f'{a}')

    ''' ***START Plotting*** '''
    '''V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren.'''
    if len(FER_4_field_dicts.keys()) == 2:
        fig, ax = plt.subplots(figsize=(10, 5))
        bar = ax.bar(list(FER_4_field_dicts.keys()),
                     list(FER_4_field_dicts.values()))
        plt.tight_layout()
        ax.set_ylabel('Number of BSMs')
        ax.set_xlabel('BSM content')
        ax.set_title(
            'FER-4: V2xHub receives the ERV\'s BSM without Part II information before the ERV activates its lights and siren.')
        ax.bar_label(bar)
        plt.savefig("FER-4.png",bbox_inches='tight')
        plt.show()

    '''Metric FER-5: For any 5-second window, V2xHub receives the ERV's BSM without Part II information before the ERV activates its lights and siren at a rate of 8-12 messages/sec..'''
    if len(FER_5_field_dicts.keys()) == 2:
        xlabel = 'Time (UTC)'
        ylabel = 'Average num of BSM per seconds without partII'
        df = pd.DataFrame(FER_5_field_dicts)
        print(df)
        df.plot(style='.-')
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.setp(plt.gca().xaxis.get_majorticklabels(),'rotation', 30)
        plt.title('FER-5: For any 5-second window, V2xHub receives the ERV\'s BSM without Part II information before the ERV activates its lights and siren at a rate of 8-12 messages/sec.')
        plt.savefig("FER-5.png",bbox_inches='tight')
        with pd.ExcelWriter("Average_num_of_BSM_without_partII_5s_window.xlsx") as writer:
            df.to_excel(writer, sheet_name='FER-5', index=False)
            print(f'Generated sheet for metric: FER-5' )
        # Show plots
        plt.show()
    
    '''Metric FER-8: V2xHub receives the ERV's BSM with Part II information once the ERV falls within the RSU's communication range after it activates its lights and siren.'''
    if len(FER_8_field_dicts.keys()) == 2:
        fig, ax = plt.subplots(figsize=(10, 5))
        bar = ax.bar(list(FER_8_field_dicts.keys()),
                     list(FER_8_field_dicts.values()))
        plt.tight_layout()
        ax.set_ylabel('Number of BSMs')
        ax.set_xlabel('BSM content')
        ax.set_title(
            'FER-8:V2xHub receives the ERV\'s BSM with Part II information once the ERV falls within the RSU\'s communication range after it activates its lights and siren.')
        ax.bar_label(bar)
        plt.savefig("FER-8.png",bbox_inches='tight')
        plt.show()

    '''Metric FER-9: Once the ERV activates its lights and siren and falls within the communication range of the RSU, V2xHub will begin to receive the ERVs BSM at a rate of 8-12 messages/sec.'''
    if len(FER_9_field_dicts.keys()) == 2:
        xlabel = 'Time (UTC)'
        ylabel = 'Average num of BSM per seconds with route'
        df = pd.DataFrame(FER_9_field_dicts)
        print(df)
        df.plot(style='.-')
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.setp(plt.gca().xaxis.get_majorticklabels(),'rotation', 30)
        plt.title('FER-9: Once the ERV activates its lights and siren and falls within the communication range of the RSU, V2xHub will begin to receive the ERVs BSM at a rate of 8-12 messages/sec.')
        plt.savefig("FER-9.png",bbox_inches='tight')
        with pd.ExcelWriter("Average_num_of_BSM_with_route_5s_window.xlsx") as writer:
            df.to_excel(writer, sheet_name='FER-9', index=False)
            print(f'Generated sheet for metric: FER-9' )
        # Show plots
        plt.show()


    if ('df_sheet_forward_bsm_delay' in locals() or 'df_sheet_forward_bsm_delay' in globals()) and len(df_sheet_forward_bsm_delay) > 0:
        print(df_sheet_forward_bsm_delay)
        xlabel = 'Time (UTC)'
        ylabel = 'V2xhub BSM forward to cloud delay'
        df_sheet_forward_bsm_delay.plot(style='.-')
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.setp(plt.gca().xaxis.get_majorticklabels(),'rotation', 30)
        plt.title('FER-11: Once V2xHub receives the ERV\'s BSM, it will identify whether emergency exists and forward the ERV\'s BSM over to CARMA Cloud within 0.1 second.')
        plt.savefig("FER-11.png",bbox_inches='tight')
        plt.show()

    if ('df_sheet_bsm_from_cloud_broadcast_delay' in locals() or 'df_sheet_bsm_from_cloud_broadcast_delay' in globals()) and len(df_sheet_bsm_from_cloud_broadcast_delay) > 0:
        print(df_sheet_bsm_from_cloud_broadcast_delay)
        xlabel = 'Time (UTC)'
        ylabel = 'Received ERV BSM from cloud and broadcast ERV BSM delay(ms)'
        df_sheet_bsm_from_cloud_broadcast_delay.plot(style='.-')
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.setp(plt.gca().xaxis.get_majorticklabels(),'rotation', 30)
        plt.title('FER-TBD-2: Received ERV BSM from cloud and broadcast ERV BSM delay(ms)')
        plt.savefig("FER-TBD-2.png",bbox_inches='tight')
        plt.show()

if __name__ == '__main__':
    main()
