version: 2

#  Copyright (C) 2019-2020 LEIDOS.
# 
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy of
#  the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations under
#  the License.
# 

# Configuration file for Circle CI 
# CI will report failure if any executed command returns and error status
# Operations performed are as follows
# Build source code
# Run unit tests for C++ 
# Run static code analyzer for SourceCloud
# Upload test results
# Every run command should start with source ${INIT_ENV} to ensure all default dependencies are available
jobs:
  build:
    # Pull docker image 
    # XTERM used for better make output
    docker:
      - image: ubuntu:18.04
        environment:
          TERM: xterm
          
    # Set working directory
    working_directory: "/home/V2X-Hub-build"
    # Pull code and execute tests |
    # Name of each run command defines purpose use
    steps:
      #setup remote docker
      - setup_remote_docker :
          docker_layer_caching: false
      # Checkout PR branch
      - checkout:
      - run: 
          name: Install Sonar & Dependencies
          command: |
            apt-get update
            apt-get -y install curl unzip sudo cmake gcc-7 g++-7 libboost1.65-dev libboost-thread1.65-dev libboost-regex1.65-dev libboost-log1.65-dev libboost-program-options1.65-dev libboost1.65-all-dev libxerces-c-dev libcurl4-openssl-dev libsnmp-dev libmysqlclient-dev libjsoncpp-dev uuid-dev libusb-dev libusb-1.0-0-dev libftdi-dev swig liboctave-dev gpsd libgps-dev portaudio19-dev libsndfile1-dev libglib2.0-dev libglibmm-2.4-dev libpcre3-dev libsigc++-2.0-dev libxml++2.6-dev libxml2-dev liblzma-dev dpkg-dev libmysqlcppconn-dev libev-dev libuv-dev git vim zip build-essential libssl-dev qtbase5-dev qtbase5-dev-tools curl libqhttpengine-dev libgtest-dev
            mkdir .base-image
            SONAR_DIR=/opt/sonarqube
            mkdir $SONAR_DIR
            curl -o $SONAR_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
            curl -o $SONAR_DIR/build-wrapper.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
            curl -sL https://deb.nodesource.com/setup_10.x | bash -
            mkdir /opt/jq
            curl -L "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" -o /opt/jq/jq
            chmod +x /opt/jq/jq
            cd $SONAR_DIR
            unzip $SONAR_DIR/sonar-scanner.zip -d .
            unzip $SONAR_DIR/build-wrapper.zip -d .
            rm $SONAR_DIR/sonar-scanner.zip
            rm $SONAR_DIR/build-wrapper.zip
            mv $(ls $SONAR_DIR | grep "sonar-scanner-") $SONAR_DIR/sonar-scanner/
            mv $(ls $SONAR_DIR | grep "build-wrapper-") $SONAR_DIR/build-wrapper/
            echo "export PATH=$PATH:/opt/jq/:$SONAR_DIR/sonar-scanner/bin/:$SONAR_DIR/build-wrapper/" > /home/V2X-Hub-build/.base-image/init-env.sh
      - run:
          name: Run Sonar Scanner
          command: |
            set -x
            source /home/V2X-Hub-build/.base-image/init-env.sh
            cd /home/V2X-Hub-build/src
            build-wrapper-linux-x86-64 --out-dir ../bw-output ./build.sh
            cd ../../..
            if [ -z "${CIRCLE_PULL_REQUEST}" ]; then
              echo "Non-PR Build Detected. Running analysis on ${CIRCLE_BRANCH}"
              cd V2X-Hub-build
              sonar-scanner -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN}
              exit 0;
            else
              echo "PR branch ${CIRCLE_BRANCH}"
              echo "Repo name ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
              echo "URL ${CIRCLE_PULL_REQUEST}"
              export PR_NUM=`echo ${CIRCLE_PULL_REQUEST} | cut -d'/' -f7`
              echo "PR number ${PR_NUM}"
              export BASE_BRANCH_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUM}"
              export TARGET_BRANCH=$(curl "$BASE_BRANCH_URL" | jq '.base.ref' | tr -d '"') 
              echo "Target Branch = ${TARGET_BRANCH}"
              cd V2X-Hub/src/v2i-hub
              git fetch --force origin ${TARGET_BRANCH}:${TARGET_BRANCH}
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN} -Dsonar.pullrequest.base=${TARGET_BRANCH} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} -Dsonar.pullrequest.key=${PR_NUM}            
            fi
            