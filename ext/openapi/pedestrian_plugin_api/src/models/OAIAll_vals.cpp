/**
 * Pedestrian Plugin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAll_vals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAll_vals::OAIAll_vals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAll_vals::OAIAll_vals() {
    this->initializeModel();
}

OAIAll_vals::~OAIAll_vals() {}

void OAIAll_vals::initializeModel() {

    m_basic_type_isSet = false;
    m_basic_type_isValid = false;

    m_sec_mark_isSet = false;
    m_sec_mark_isValid = false;

    m_msg_cnt_isSet = false;
    m_msg_cnt_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_heading_isSet = false;
    m_heading_isValid = false;

    m_accel_set_isSet = false;
    m_accel_set_isValid = false;

    m_path_prediction_isSet = false;
    m_path_prediction_isValid = false;

    m_use_state_isSet = false;
    m_use_state_isValid = false;

    m_cross_request_isSet = false;
    m_cross_request_isValid = false;

    m_cross_state_isSet = false;
    m_cross_state_isValid = false;

    m_cluster_size_isSet = false;
    m_cluster_size_isValid = false;

    m_cluster_radius_isSet = false;
    m_cluster_radius_isValid = false;

    m_event_responder_type_isSet = false;
    m_event_responder_type_isValid = false;

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_activity_sub_type_isSet = false;
    m_activity_sub_type_isValid = false;

    m_assist_type_isSet = false;
    m_assist_type_isValid = false;

    m_sizing_isSet = false;
    m_sizing_isValid = false;

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_attachment_radius_isSet = false;
    m_attachment_radius_isValid = false;

    m_animal_type_isSet = false;
    m_animal_type_isValid = false;
}

void OAIAll_vals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAll_vals::fromJsonObject(QJsonObject json) {

    m_basic_type_isValid = ::OpenAPI::fromJsonValue(basic_type, json[QString("basicType")]);
    m_basic_type_isSet = !json[QString("basicType")].isNull() && m_basic_type_isValid;

    m_sec_mark_isValid = ::OpenAPI::fromJsonValue(sec_mark, json[QString("secMark")]);
    m_sec_mark_isSet = !json[QString("secMark")].isNull() && m_sec_mark_isValid;

    m_msg_cnt_isValid = ::OpenAPI::fromJsonValue(msg_cnt, json[QString("msgCnt")]);
    m_msg_cnt_isSet = !json[QString("msgCnt")].isNull() && m_msg_cnt_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(accuracy, json[QString("accuracy")]);
    m_accuracy_isSet = !json[QString("accuracy")].isNull() && m_accuracy_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;

    m_heading_isValid = ::OpenAPI::fromJsonValue(heading, json[QString("heading")]);
    m_heading_isSet = !json[QString("heading")].isNull() && m_heading_isValid;

    m_accel_set_isValid = ::OpenAPI::fromJsonValue(accel_set, json[QString("accelSet")]);
    m_accel_set_isSet = !json[QString("accelSet")].isNull() && m_accel_set_isValid;

    m_path_prediction_isValid = ::OpenAPI::fromJsonValue(path_prediction, json[QString("pathPrediction")]);
    m_path_prediction_isSet = !json[QString("pathPrediction")].isNull() && m_path_prediction_isValid;

    m_use_state_isValid = ::OpenAPI::fromJsonValue(use_state, json[QString("useState")]);
    m_use_state_isSet = !json[QString("useState")].isNull() && m_use_state_isValid;

    m_cross_request_isValid = ::OpenAPI::fromJsonValue(cross_request, json[QString("crossRequest")]);
    m_cross_request_isSet = !json[QString("crossRequest")].isNull() && m_cross_request_isValid;

    m_cross_state_isValid = ::OpenAPI::fromJsonValue(cross_state, json[QString("crossState")]);
    m_cross_state_isSet = !json[QString("crossState")].isNull() && m_cross_state_isValid;

    m_cluster_size_isValid = ::OpenAPI::fromJsonValue(cluster_size, json[QString("clusterSize")]);
    m_cluster_size_isSet = !json[QString("clusterSize")].isNull() && m_cluster_size_isValid;

    m_cluster_radius_isValid = ::OpenAPI::fromJsonValue(cluster_radius, json[QString("clusterRadius")]);
    m_cluster_radius_isSet = !json[QString("clusterRadius")].isNull() && m_cluster_radius_isValid;

    m_event_responder_type_isValid = ::OpenAPI::fromJsonValue(event_responder_type, json[QString("eventResponderType")]);
    m_event_responder_type_isSet = !json[QString("eventResponderType")].isNull() && m_event_responder_type_isValid;

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_activity_sub_type_isValid = ::OpenAPI::fromJsonValue(activity_sub_type, json[QString("activitySubType")]);
    m_activity_sub_type_isSet = !json[QString("activitySubType")].isNull() && m_activity_sub_type_isValid;

    m_assist_type_isValid = ::OpenAPI::fromJsonValue(assist_type, json[QString("assistType")]);
    m_assist_type_isSet = !json[QString("assistType")].isNull() && m_assist_type_isValid;

    m_sizing_isValid = ::OpenAPI::fromJsonValue(sizing, json[QString("sizing")]);
    m_sizing_isSet = !json[QString("sizing")].isNull() && m_sizing_isValid;

    m_attachment_isValid = ::OpenAPI::fromJsonValue(attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_attachment_radius_isValid = ::OpenAPI::fromJsonValue(attachment_radius, json[QString("attachmentRadius")]);
    m_attachment_radius_isSet = !json[QString("attachmentRadius")].isNull() && m_attachment_radius_isValid;

    m_animal_type_isValid = ::OpenAPI::fromJsonValue(animal_type, json[QString("animalType")]);
    m_animal_type_isSet = !json[QString("animalType")].isNull() && m_animal_type_isValid;
}

QString OAIAll_vals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAll_vals::asJsonObject() const {
    QJsonObject obj;
    if (m_basic_type_isSet) {
        obj.insert(QString("basicType"), ::OpenAPI::toJsonValue(basic_type));
    }
    if (m_sec_mark_isSet) {
        obj.insert(QString("secMark"), ::OpenAPI::toJsonValue(sec_mark));
    }
    if (m_msg_cnt_isSet) {
        obj.insert(QString("msgCnt"), ::OpenAPI::toJsonValue(msg_cnt));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(position));
    }
    if (accuracy.isSet()) {
        obj.insert(QString("accuracy"), ::OpenAPI::toJsonValue(accuracy));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(speed));
    }
    if (m_heading_isSet) {
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(heading));
    }
    if (accel_set.isSet()) {
        obj.insert(QString("accelSet"), ::OpenAPI::toJsonValue(accel_set));
    }
    if (path_prediction.isSet()) {
        obj.insert(QString("pathPrediction"), ::OpenAPI::toJsonValue(path_prediction));
    }
    if (m_use_state_isSet) {
        obj.insert(QString("useState"), ::OpenAPI::toJsonValue(use_state));
    }
    if (m_cross_request_isSet) {
        obj.insert(QString("crossRequest"), ::OpenAPI::toJsonValue(cross_request));
    }
    if (m_cross_state_isSet) {
        obj.insert(QString("crossState"), ::OpenAPI::toJsonValue(cross_state));
    }
    if (m_cluster_size_isSet) {
        obj.insert(QString("clusterSize"), ::OpenAPI::toJsonValue(cluster_size));
    }
    if (m_cluster_radius_isSet) {
        obj.insert(QString("clusterRadius"), ::OpenAPI::toJsonValue(cluster_radius));
    }
    if (m_event_responder_type_isSet) {
        obj.insert(QString("eventResponderType"), ::OpenAPI::toJsonValue(event_responder_type));
    }
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(activity_type));
    }
    if (m_activity_sub_type_isSet) {
        obj.insert(QString("activitySubType"), ::OpenAPI::toJsonValue(activity_sub_type));
    }
    if (m_assist_type_isSet) {
        obj.insert(QString("assistType"), ::OpenAPI::toJsonValue(assist_type));
    }
    if (m_sizing_isSet) {
        obj.insert(QString("sizing"), ::OpenAPI::toJsonValue(sizing));
    }
    if (m_attachment_isSet) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(attachment));
    }
    if (m_attachment_radius_isSet) {
        obj.insert(QString("attachmentRadius"), ::OpenAPI::toJsonValue(attachment_radius));
    }
    if (m_animal_type_isSet) {
        obj.insert(QString("animalType"), ::OpenAPI::toJsonValue(animal_type));
    }
    return obj;
}

double OAIAll_vals::getBasicType() const {
    return basic_type;
}
void OAIAll_vals::setBasicType(const double &basic_type) {
    this->basic_type = basic_type;
    this->m_basic_type_isSet = true;
}

bool OAIAll_vals::is_basic_type_Set() const{
    return m_basic_type_isSet;
}

bool OAIAll_vals::is_basic_type_Valid() const{
    return m_basic_type_isValid;
}

double OAIAll_vals::getSecMark() const {
    return sec_mark;
}
void OAIAll_vals::setSecMark(const double &sec_mark) {
    this->sec_mark = sec_mark;
    this->m_sec_mark_isSet = true;
}

bool OAIAll_vals::is_sec_mark_Set() const{
    return m_sec_mark_isSet;
}

bool OAIAll_vals::is_sec_mark_Valid() const{
    return m_sec_mark_isValid;
}

double OAIAll_vals::getMsgCnt() const {
    return msg_cnt;
}
void OAIAll_vals::setMsgCnt(const double &msg_cnt) {
    this->msg_cnt = msg_cnt;
    this->m_msg_cnt_isSet = true;
}

bool OAIAll_vals::is_msg_cnt_Set() const{
    return m_msg_cnt_isSet;
}

bool OAIAll_vals::is_msg_cnt_Valid() const{
    return m_msg_cnt_isValid;
}

QString OAIAll_vals::getId() const {
    return id;
}
void OAIAll_vals::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAll_vals::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAll_vals::is_id_Valid() const{
    return m_id_isValid;
}

OAIAll_vals_position OAIAll_vals::getPosition() const {
    return position;
}
void OAIAll_vals::setPosition(const OAIAll_vals_position &position) {
    this->position = position;
    this->m_position_isSet = true;
}

bool OAIAll_vals::is_position_Set() const{
    return m_position_isSet;
}

bool OAIAll_vals::is_position_Valid() const{
    return m_position_isValid;
}

OAIAll_vals_accuracy OAIAll_vals::getAccuracy() const {
    return accuracy;
}
void OAIAll_vals::setAccuracy(const OAIAll_vals_accuracy &accuracy) {
    this->accuracy = accuracy;
    this->m_accuracy_isSet = true;
}

bool OAIAll_vals::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAIAll_vals::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

double OAIAll_vals::getSpeed() const {
    return speed;
}
void OAIAll_vals::setSpeed(const double &speed) {
    this->speed = speed;
    this->m_speed_isSet = true;
}

bool OAIAll_vals::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIAll_vals::is_speed_Valid() const{
    return m_speed_isValid;
}

double OAIAll_vals::getHeading() const {
    return heading;
}
void OAIAll_vals::setHeading(const double &heading) {
    this->heading = heading;
    this->m_heading_isSet = true;
}

bool OAIAll_vals::is_heading_Set() const{
    return m_heading_isSet;
}

bool OAIAll_vals::is_heading_Valid() const{
    return m_heading_isValid;
}

OAIAll_vals_accelSet OAIAll_vals::getAccelSet() const {
    return accel_set;
}
void OAIAll_vals::setAccelSet(const OAIAll_vals_accelSet &accel_set) {
    this->accel_set = accel_set;
    this->m_accel_set_isSet = true;
}

bool OAIAll_vals::is_accel_set_Set() const{
    return m_accel_set_isSet;
}

bool OAIAll_vals::is_accel_set_Valid() const{
    return m_accel_set_isValid;
}

OAIAll_vals_pathPrediction OAIAll_vals::getPathPrediction() const {
    return path_prediction;
}
void OAIAll_vals::setPathPrediction(const OAIAll_vals_pathPrediction &path_prediction) {
    this->path_prediction = path_prediction;
    this->m_path_prediction_isSet = true;
}

bool OAIAll_vals::is_path_prediction_Set() const{
    return m_path_prediction_isSet;
}

bool OAIAll_vals::is_path_prediction_Valid() const{
    return m_path_prediction_isValid;
}

QString OAIAll_vals::getUseState() const {
    return use_state;
}
void OAIAll_vals::setUseState(const QString &use_state) {
    this->use_state = use_state;
    this->m_use_state_isSet = true;
}

bool OAIAll_vals::is_use_state_Set() const{
    return m_use_state_isSet;
}

bool OAIAll_vals::is_use_state_Valid() const{
    return m_use_state_isValid;
}

bool OAIAll_vals::isCrossRequest() const {
    return cross_request;
}
void OAIAll_vals::setCrossRequest(const bool &cross_request) {
    this->cross_request = cross_request;
    this->m_cross_request_isSet = true;
}

bool OAIAll_vals::is_cross_request_Set() const{
    return m_cross_request_isSet;
}

bool OAIAll_vals::is_cross_request_Valid() const{
    return m_cross_request_isValid;
}

bool OAIAll_vals::isCrossState() const {
    return cross_state;
}
void OAIAll_vals::setCrossState(const bool &cross_state) {
    this->cross_state = cross_state;
    this->m_cross_state_isSet = true;
}

bool OAIAll_vals::is_cross_state_Set() const{
    return m_cross_state_isSet;
}

bool OAIAll_vals::is_cross_state_Valid() const{
    return m_cross_state_isValid;
}

double OAIAll_vals::getClusterSize() const {
    return cluster_size;
}
void OAIAll_vals::setClusterSize(const double &cluster_size) {
    this->cluster_size = cluster_size;
    this->m_cluster_size_isSet = true;
}

bool OAIAll_vals::is_cluster_size_Set() const{
    return m_cluster_size_isSet;
}

bool OAIAll_vals::is_cluster_size_Valid() const{
    return m_cluster_size_isValid;
}

double OAIAll_vals::getClusterRadius() const {
    return cluster_radius;
}
void OAIAll_vals::setClusterRadius(const double &cluster_radius) {
    this->cluster_radius = cluster_radius;
    this->m_cluster_radius_isSet = true;
}

bool OAIAll_vals::is_cluster_radius_Set() const{
    return m_cluster_radius_isSet;
}

bool OAIAll_vals::is_cluster_radius_Valid() const{
    return m_cluster_radius_isValid;
}

QString OAIAll_vals::getEventResponderType() const {
    return event_responder_type;
}
void OAIAll_vals::setEventResponderType(const QString &event_responder_type) {
    this->event_responder_type = event_responder_type;
    this->m_event_responder_type_isSet = true;
}

bool OAIAll_vals::is_event_responder_type_Set() const{
    return m_event_responder_type_isSet;
}

bool OAIAll_vals::is_event_responder_type_Valid() const{
    return m_event_responder_type_isValid;
}

QString OAIAll_vals::getActivityType() const {
    return activity_type;
}
void OAIAll_vals::setActivityType(const QString &activity_type) {
    this->activity_type = activity_type;
    this->m_activity_type_isSet = true;
}

bool OAIAll_vals::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIAll_vals::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

QString OAIAll_vals::getActivitySubType() const {
    return activity_sub_type;
}
void OAIAll_vals::setActivitySubType(const QString &activity_sub_type) {
    this->activity_sub_type = activity_sub_type;
    this->m_activity_sub_type_isSet = true;
}

bool OAIAll_vals::is_activity_sub_type_Set() const{
    return m_activity_sub_type_isSet;
}

bool OAIAll_vals::is_activity_sub_type_Valid() const{
    return m_activity_sub_type_isValid;
}

QString OAIAll_vals::getAssistType() const {
    return assist_type;
}
void OAIAll_vals::setAssistType(const QString &assist_type) {
    this->assist_type = assist_type;
    this->m_assist_type_isSet = true;
}

bool OAIAll_vals::is_assist_type_Set() const{
    return m_assist_type_isSet;
}

bool OAIAll_vals::is_assist_type_Valid() const{
    return m_assist_type_isValid;
}

QString OAIAll_vals::getSizing() const {
    return sizing;
}
void OAIAll_vals::setSizing(const QString &sizing) {
    this->sizing = sizing;
    this->m_sizing_isSet = true;
}

bool OAIAll_vals::is_sizing_Set() const{
    return m_sizing_isSet;
}

bool OAIAll_vals::is_sizing_Valid() const{
    return m_sizing_isValid;
}

QString OAIAll_vals::getAttachment() const {
    return attachment;
}
void OAIAll_vals::setAttachment(const QString &attachment) {
    this->attachment = attachment;
    this->m_attachment_isSet = true;
}

bool OAIAll_vals::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAIAll_vals::is_attachment_Valid() const{
    return m_attachment_isValid;
}

double OAIAll_vals::getAttachmentRadius() const {
    return attachment_radius;
}
void OAIAll_vals::setAttachmentRadius(const double &attachment_radius) {
    this->attachment_radius = attachment_radius;
    this->m_attachment_radius_isSet = true;
}

bool OAIAll_vals::is_attachment_radius_Set() const{
    return m_attachment_radius_isSet;
}

bool OAIAll_vals::is_attachment_radius_Valid() const{
    return m_attachment_radius_isValid;
}

QString OAIAll_vals::getAnimalType() const {
    return animal_type;
}
void OAIAll_vals::setAnimalType(const QString &animal_type) {
    this->animal_type = animal_type;
    this->m_animal_type_isSet = true;
}

bool OAIAll_vals::is_animal_type_Set() const{
    return m_animal_type_isSet;
}

bool OAIAll_vals::is_animal_type_Valid() const{
    return m_animal_type_isValid;
}

bool OAIAll_vals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sec_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msg_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (accuracy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (accel_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (path_prediction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_responder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assist_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sizing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_animal_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAll_vals::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_basic_type_isValid && m_sec_mark_isValid && m_msg_cnt_isValid && m_id_isValid && m_position_isValid && m_accuracy_isValid && m_speed_isValid && m_heading_isValid && true;
}

} // namespace OpenAPI
