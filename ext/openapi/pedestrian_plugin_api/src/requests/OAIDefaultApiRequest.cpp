/**
 * Pedestrian Plugin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIDefaultApiRequest.h"

namespace OpenAPI {

OAIDefaultApiRequest::OAIDefaultApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIDefaultApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIDefaultApiRequest::~OAIDefaultApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIDefaultApiRequest::~OAIDefaultApiRequest()";
}

QMap<QString, QString>
OAIDefaultApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIDefaultApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIDefaultApiRequest::getRawSocket(){
    return socket;
}


void OAIDefaultApiRequest::psmPostRequest(){
    qDebug() << "/pedestrian_plugin/psm";
    connect(this, &OAIDefaultApiRequest::psmPost, handler.data(), &OAIDefaultApiHandler::psmPost);

    //Read in the psm xml post
    QString st; 
    while(socket->bytesAvailable()>0)
    {	
        st.append(socket->readAll());
    }
    //Create substring starting at beginning of PSM payload
    std::string socketStr = st.toStdString();
    std::string delimiter = "<P";
    std::string psm_xml = socketStr.substr(socketStr.find(delimiter), socketStr.length());

    //Convert from xml to json
    std::stringstream iss;
    iss << psm_xml;
    boost::property_tree::ptree parent_node;
    boost::property_tree::read_xml(iss, parent_node);

    //
    // std::ostringstream test;
    // write_xml(test, parent_node);
    // std::cout << "parent node: " << test.str() << std::endl;
    //

    std::stringstream oss;
    boost::property_tree::json_parser::write_json(oss, parent_node);
    std::string json_str = oss.str();
    std::cout << "json_str: " << json_str << std::endl;

    QString data = QString::fromStdString(json_str); 
    qDebug() << "data: " << data;

    QJsonDocument doc = QJsonDocument::fromJson(data.toUtf8());
    QJsonObject obj = doc.object(); 
    QString strFromObj = doc.toJson(QJsonDocument::Compact).toStdString().c_str();
    qDebug() << "strFromObj: " << strFromObj;

    // QJsonDocument doc;
    //socket->readJson(doc);
    // QJsonObject obj = doc.object();
    
    OAIPersonalSafetyMessage oai_personal_safety_message;
    // ::OpenAPI::fromJsonValue(oai_personal_safety_message, obj);
    oai_personal_safety_message.fromJson(data);


    emit psmPost(oai_personal_safety_message);
}



void OAIDefaultApiRequest::psmPostResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDefaultApiRequest::psmPostError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDefaultApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
