/**
 * Pedestrian Webservice
 * Webservice registers pedestrian request for going through intersection
 *
 * The version of the OpenAPI document: 0.1.9
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PSM.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PSM::PSM()
{
    m_Id = 0.0;
    m_IdIsSet = false;
    m_Lon = 0.0;
    m_Lat = 0.0;
    m_Heading = 0.0;
    m_Velocity = 0.0;
    m_VelocityIsSet = false;
}

PSM::~PSM()
{
}

void PSM::validate()
{
    // TODO: implement validation
}

web::json::value PSM::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    val[utility::conversions::to_string_t("lon")] = ModelBase::toJson(m_Lon);
    val[utility::conversions::to_string_t("lat")] = ModelBase::toJson(m_Lat);
    val[utility::conversions::to_string_t("heading")] = ModelBase::toJson(m_Heading);
    if(m_VelocityIsSet)
    {
        val[utility::conversions::to_string_t("velocity")] = ModelBase::toJson(m_Velocity);
    }

    return val;
}

void PSM::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    setLon(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("lon"))));
    setLat(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("lat"))));
    setHeading(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("heading"))));
    if(val.has_field(utility::conversions::to_string_t("velocity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("velocity"));
        if(!fieldValue.is_null())
        {
            setVelocity(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void PSM::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lon"), m_Lon));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lat"), m_Lat));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heading"), m_Heading));
    if(m_VelocityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("velocity"), m_Velocity));
    }
}

void PSM::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    setLon(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lon"))));
    setLat(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lat"))));
    setHeading(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("heading"))));
    if(multipart->hasContent(utility::conversions::to_string_t("velocity")))
    {
        setVelocity(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("velocity"))));
    }
}

double PSM::getId() const
{
    return m_Id;
}

void PSM::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PSM::idIsSet() const
{
    return m_IdIsSet;
}

void PSM::unsetId()
{
    m_IdIsSet = false;
}

double PSM::getLon() const
{
    return m_Lon;
}

void PSM::setLon(double value)
{
    m_Lon = value;
    
}

double PSM::getLat() const
{
    return m_Lat;
}

void PSM::setLat(double value)
{
    m_Lat = value;
    
}

double PSM::getHeading() const
{
    return m_Heading;
}

void PSM::setHeading(double value)
{
    m_Heading = value;
    
}

double PSM::getVelocity() const
{
    return m_Velocity;
}

void PSM::setVelocity(double value)
{
    m_Velocity = value;
    m_VelocityIsSet = true;
}

bool PSM::velocityIsSet() const
{
    return m_VelocityIsSet;
}

void PSM::unsetVelocity()
{
    m_VelocityIsSet = false;
}

}
}
}
}


